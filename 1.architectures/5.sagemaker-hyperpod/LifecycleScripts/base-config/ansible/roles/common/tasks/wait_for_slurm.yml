---
- name: Controller Node(s) - Check if slurm.conf exists
  ansible.builtin.stat:
    path: "{{ slurm_conf_path | default('/opt/slurm/etc/slurm.conf') }}"
  register: slurm_conf_stat
  when: node_role == 'controller'

- name: Controller Node(s) - Read slurm.conf content for debugging
  ansible.builtin.slurp:
    src: "{{ slurm_conf_path | default('/opt/slurm/etc/slurm.conf') }}"
  register: slurm_conf_content
  when: node_role == 'controller' and slurm_conf_stat.stat.exists

- name: Controller Node(s) - Wait for slurm.conf to contain controller IPs
  ansible.builtin.shell: "grep -q '{{ item }}' {{ slurm_conf_path | default('/opt/slurm/etc/slurm.conf') }}"
  register: slurm_conf_check
  until: slurm_conf_check.rc == 0
  retries: 12
  delay: 5
  with_items: "{{ controller_ips }}"
  when: node_role == 'controller' and slurm_conf_stat.stat.exists
  ignore_errors: true
  failed_when: false

- name: Controller Node(s) - Set slurm_ready set_fact
  ansible.builtin.set_fact:
    slurm_ready: true
  when: >
    node_role == 'controller' and 
    slurm_conf_stat.stat is defined and 
    slurm_conf_stat.stat.exists and 
    slurm_conf_check.results is defined and 
    slurm_conf_check.results | selectattr('rc', 'equalto', 0) | list | length > 0

- name: Worker/Login Node(s) - Just check if slurm.conf exists (okay if not)
  ansible.builtin.stat:
    path: "{{ slurm_conf_path | default('/opt/slurm/etc/slurm.conf') }}"
  register: worker_slurm_conf_stat
  when: node_role != 'controller'

- name: Worker/Login Node(s) - Set slurm_ready fact 
  ansible.builtin.set_fact:
    slurm_ready: true
  when: node_role != 'controller'

- name: Log message if slurm.conf is not present
  ansible.builtin.debug:
    msg: "slurm.conf is not present. It is fine for login/compute nodes"
  when: >
    (node_role == 'controller' and (slurm_conf_stat.stat is not defined or not slurm_conf_stat.stat.exists)) or
    (node_role != 'controller' and (worker_slurm_conf_stat.stat is not defined or not worker_slurm_conf_stat.stat.exists))

- name: Log message if slurm.conf contains controller IP(s)
  ansible.builtin.debug:
    msg: "slurm.conf found. It contains at least one controller address"
  when: >
    (node_role == 'controller' and slurm_conf_stat.stat is defined and slurm_conf_stat.stat.exists and 
     slurm_conf_check.results is defined and slurm_conf_check.results | selectattr('rc', 'equalto', 0) | list | length > 0) or
    (node_role != 'controller' and worker_slurm_conf_stat.stat is defined and worker_slurm_conf_stat.stat.exists)


- name: Controller Node(s) - Wait for scontrol
  ansible.builtin.shell: |
    python3 -c "
    import subprocess
    import time
    import sys

    def wait_for_scontrol():
        timeout = 120
        sleep = 5
        for i in range(timeout // sleep):
            try:
                output = subprocess.check_output(['scontrol', 'show', 'nodes'])
                if output.strip():
                    print('Nodes registered with Slurm, Proceeding with install scripts.')
                    sys.exit(0)
            except subprocess.CalledProcessError:
                pass

            print('Waiting for output. Retrying in {} seconds...'.format(sleep, file=sys.stderr))
            time.sleep(sleep)

        print('Exceeded maximum wait time of {} seconds. No output from scontrol.'.format(timeout, file=sys.stderr))
        sys.exit(1)

    wait_for_scontrol()
    "
  register: scontrol_check
  when: >
    workload_manager == "slurm" and 
    node_role == 'controller' and 
    config.enable_observability | bool
  ignore_errors: true
  changed_when: false

- name: Set scontrol_ready fact 
  ansible.builtin.set_fact:
    scontrol_ready: "{{ scontrol_check is defined and scontrol_check.rc == 0 }}"
  when: >
    workload_manager == "slurm" and 
    node_role == 'controller' and 
    config.enable_observability | bool 

- name: Debug scontrol status
  ansible.builtin.debug:
    msg: "scontrol check {{ 'passed' if scontrol_ready | default(false) else 'failed' }}"
  when: >
    workload_manager == "slurm" and
    node_role == "controller" and
    config.enable_observability | bool


