---
- name: Check if Docker is already installed
  ansible.builtin.command: which docker
  register: docker_check
  failed_when: false
  changed_when: false

- name: Install Docker
  when: docker_check.rc != 0
  block:
    - name: Log Docker installation start
      ansible.builtin.debug:
        msg: |
          ###################################
          # BEGIN: install docker
          ###################################
    
    - name: Clean up conflicting Docker repository configurations
      ansible.builtin.file:
        path: "{{ item }}"
        state: absent 
      loop:
        - /etc/apt/sources.list.d/docker.list
        - /etc/apt/sources.list.d/download_docker_com_linux_ubuntu.list
        - /usr/share/keyrings/docker-archive-keyring.gpg
        - /etc/apt/keyrings/docker.gpg
      ignore_errors: true

    - name: Update apt cache after cleanup
      apt:
        update_cache: yes
      ignore_errors: true

    - name: Create keyrings directory
      ansible.builtin.file:
        path: /etc/apt/keyrings
        state: directory
        mode: '0755'

    # - name: Add Docker GPG key
    #   apt_key:
    #     url: https://download.docker.com/linux/ubuntu/gpg
    #     state: present
    #     keyring: /etc/apt/keyrings/docker.gpg

    - name: Add Docker GPG key using shell (matching bash script)
      ansible.builtin.shell: |
        curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /etc/apt/keyrings/docker.gpg
      args:
        creates: /etc/apt/keyrings/docker.gpg

    # - name: Add Docker repository to apt
    #   apt_repository:
    #     repo: "deb [arch={{ ansible_architecture }} signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable"
    #     state: present
    
    - name: Add Docker repository using shell (matching bash script)
      ansible.builtin.shell: |
        echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null
      args:
        creates: /etc/apt/sources.list.d/docker.list

    - name: Explicitly update cache to add docker packages
      apt:
        update_cache: true

    - name: Debug available Docker packages
      ansible.builtin.shell: apt-cache search docker-ce
      register: docker_packages_available
      
    - name: Show available Docker packages
      ansible.builtin.debug:
        var: docker_packages_available.stdout_lines

    - name: Debug repository sources
      ansible.builtin.shell: cat /etc/apt/sources.list.d/download_docker_com_linux_ubuntu.list
      register: docker_repo_content
      
    - name: Show repository content
      ansible.builtin.debug:
        var: docker_repo_content.stdout_lines

    - name: Check if repository URL is accessible
      ansible.builtin.shell: curl -I https://download.docker.com/linux/ubuntu/dists/{{ ansible_distribution_release }}/stable/
      register: docker_repo_check
      
    - name: Show repository accessibility
      ansible.builtin.debug:
        var: docker_repo_check.stdout_lines

    - name: Check GPG key file exists
      ansible.builtin.stat:
        path: /etc/apt/keyrings/docker.gpg
      register: gpg_key_stat

    - name: Show GPG key status
      ansible.builtin.debug:
        var: gpg_key_stat

    - name: Check apt update errors
      ansible.builtin.shell: apt update 2>&1 | grep -i docker || true
      register: apt_update_errors

    - name: Show apt update errors
      ansible.builtin.debug:
        var: apt_update_errors.stdout_lines

    - name: Try manual package listing
      ansible.builtin.shell: apt-cache madison docker-ce || true
      register: docker_madison

    - name: Show manual package listing
      ansible.builtin.debug:
        var: docker_madison.stdout_lines

    - name: List all available packages from Docker repository
      ansible.builtin.shell: apt-cache policy | grep -A5 -B5 docker
      register: docker_policy
      
    - name: Show Docker repository policy
      ansible.builtin.debug:
        var: docker_policy.stdout_lines
        
    - name: Install Docker
      apt:
        name: "{{ item }}"
        state: present
      loop:
        - docker-ce
        - docker-ce-cli
        - containerd.io
        - docker-buildx-plugin
        - docker-compose-plugin

    - name: Check if docker service is active
      service: 
        name: docker
        state: started
        enabled: true
    
    - name: Ensure group docker exists
      ansible.builtin.group:
        name: docker
        state: present

    - name: Set permissions on Docker binary
      ansible.builtin.shell: |
        chgrp docker $(which docker)
        chmod g+s $(which docker)
      changed_when: true

    - name: Add user ubuntu to docker group
      ansible.builtin.user:
        name: ubuntu
        groups: docker
        append: true

    - name: Add NVIDIA container toolkit repository key        
      apt_key:
        url: https://nvidia.github.io/libnvidia-container/gpgkey 
        state: present
        keyring: /usr/share/keyrings/nvidia-container-toolkit-keyring.gpg
    
    - name: Add NVIDIA container toolkit apt repository 
      apt_repository:
        repo: "deb [signed-by=/usr/share/keyrings/nvidia-container-toolkit-keyring.gpg] https://nvidia.github.io/libnvidia-container/stable/deb/{{ ansible_architecture }} /"
        state: present
        update_cache: true
    
    - name: Install NVIDIA container toolkit
      apt:
        name: "{{ item }}"
        state: present
        dpkg_options: "lock-timeout=120 --allow-downgrades"
      loop:
        - nvidia-container-toolkit={{ nvidia_container_tlk_version }}
        - nvidia-container-toolkit-base={{ nvidia_container_tlk_version }}
        - libnvidia-container-tools={{ nvidia_container_tlk_version }}
        - libnvidia-container1={{ nvidia_container_tlk_version }}

    - name: Hold nvidia-container-toolkit version(s)
      ansible.builtin.dpkg_selections:
        name: "{{ item }}"
        selection: hold
      loop:
        - nvidia-container-toolkit 
        - nvidia-container-toolkit-base 
        - libnvidia-container-tools 
        - libnvidia-container1      
    
    - name: Print NVIDIA container toolkit version
      ansible.builtin.debug:
        msg: |
          Expected NV_TLK_VERSION: {{ nvidia_container_tlk_version }}
          Installed NV_TLK_VERSION: {{ lookup('pipe', "dpkg -l nvidia-container-toolkit | awk '/nvidia-container-toolkit/ {print $3}'") }}

    - name: Check for /opt/sagemaker mount
      ansible.builtin.stat:
        path: /opt/sagemaker
        get_attributes: true
      register: sagemaker_stat
    
    - name: Check for /opt/dlami/nvme mount
      ansible.builtin.stat:
        path: /opt/dlami/nvme
        get_attributes: true
      register: dlami_nvme_stat
    
    - name: Configure Docker for /opt/dlami/nvme
      when: dlami_nvme_stat.stat.exists and dlami_nvme_stat.stat.ismount
      block:
        - name: Create Docker daemon.json for /opt/dlami/nvme
          ansible.builtin.copy:
            dest: /etc/docker/daemon.json
            content: |
              {
                  "data-root": "/opt/dlami/nvme/docker/data-root"
              }
    
        - name: Update Docker service for /opt/dlami/nvme
          ansible.builtin.lineinfile:
            path: /usr/lib/systemd/system/docker.service
            regexp: '^(\[Service\])$'
            line: '[Service]\nEnvironment="DOCKER_TMPDIR=/opt/dlami/nvme/docker/tmp"'
            backrefs: yes

    - name: Configure Docker for /opt/sagemaker
      when: sagemaker_stat.stat.exists and sagemaker_stat.stat.ismount and not (dlami_nvme_stat.stat.exists and dlami_nvme_stat.stat.ismount)
      block:
        - name: Create Docker daemon.json for /opt/sagemaker
          ansible.builtin.copy:
            dest: /etc/docker/daemon.json
            content: |
              {
                  "data-root": "/opt/sagemaker/docker/data-root"
              }

        - name: Update Docker service for /opt/sagemaker
          ansible.builtin.lineinfile:
            path: /usr/lib/systemd/system/docker.service
            regexp: '^(\[Service\])$'
            line: '[Service]\nEnvironment="DOCKER_TMPDIR=/opt/sagemaker/docker/tmp"'
            backrefs: yes

    - name: Reload systemd and restart Docker
      ansible.builtin.systemd:
        daemon_reload: yes
        name: docker
        state: restarted

